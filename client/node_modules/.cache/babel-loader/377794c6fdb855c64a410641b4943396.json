{"ast":null,"code":"var _jsxFileName = \"F:\\\\WebDev\\\\Store\\\\client\\\\src\\\\pages\\\\components\\\\CheckoutForm.jsx\",\n  _s = $RefreshSig$();\nimport { PaymentElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckoutForm() {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n    if (!clientSecret) {\n      return;\n    }\n    stripe.retrievePaymentIntent(clientSecret).then(_ref => {\n      let {\n        paymentIntent\n      } = _ref;\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000/OrderComplete\"\n      }\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n    setIsLoading(false);\n  };\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {\n      id: \"payment-element\",\n      options: paymentElementOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading || !stripe || !elements,\n      id: \"submit\",\n      className: \"Stripebutton\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 19\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"payment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 3\n  }, this);\n}\n_s(CheckoutForm, \"I2mD8VtLUdS+pxXYAFWCJ5LM4cQ=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["PaymentElement","useElements","useStripe","React","useEffect","useState","CheckoutForm","stripe","elements","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type","paymentElementOptions","layout"],"sources":["F:/WebDev/Store/client/src/pages/components/CheckoutForm.jsx"],"sourcesContent":["import {\r\n\tPaymentElement,\r\n\tuseElements,\r\n\tuseStripe,\r\n} from \"@stripe/react-stripe-js\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport default function CheckoutForm() {\r\n\tconst stripe = useStripe();\r\n\tconst elements = useElements();\r\n\r\n\tconst [message, setMessage] = useState(null);\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!stripe) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst clientSecret = new URLSearchParams(window.location.search).get(\r\n\t\t\t\"payment_intent_client_secret\"\r\n\t\t);\r\n\r\n\t\tif (!clientSecret) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tstripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n\t\t\tswitch (paymentIntent.status) {\r\n\t\t\t\tcase \"succeeded\":\r\n\t\t\t\t\tsetMessage(\"Payment succeeded!\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"processing\":\r\n\t\t\t\t\tsetMessage(\"Your payment is processing.\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"requires_payment_method\":\r\n\t\t\t\t\tsetMessage(\"Your payment was not successful, please try again.\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tsetMessage(\"Something went wrong.\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t}, [stripe]);\r\n\r\n\tconst handleSubmit = async (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (!stripe || !elements) {\r\n\t\t\t// Stripe.js has not yet loaded.\r\n\t\t\t// Make sure to disable form submission until Stripe.js has loaded.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsetIsLoading(true);\r\n\r\n\t\tconst { error } = await stripe.confirmPayment({\r\n\t\t\telements,\r\n\t\t\tconfirmParams: {\r\n\t\t\t\t// Make sure to change this to your payment completion page\r\n\t\t\t\treturn_url: \"http://localhost:3000/OrderComplete\",\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t// This point will only be reached if there is an immediate error when\r\n\t\t// confirming the payment. Otherwise, your customer will be redirected to\r\n\t\t// your `return_url`. For some payment methods like iDEAL, your customer will\r\n\t\t// be redirected to an intermediate site first to authorize the payment, then\r\n\t\t// redirected to the `return_url`.\r\n\t\tif (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n\t\t\tsetMessage(error.message);\r\n\t\t} else {\r\n\t\t\tsetMessage(\"An unexpected error occurred.\");\r\n\t\t}\r\n\r\n\t\tsetIsLoading(false);\r\n\t};\r\n\r\n\tconst paymentElementOptions = {\r\n\t\tlayout: \"tabs\",\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form id=\"payment-form\" onSubmit={handleSubmit}>\r\n\t\t\t<PaymentElement id=\"payment-element\" options={paymentElementOptions} />\r\n\t\t\t<button\r\n\t\t\t\tdisabled={isLoading || !stripe || !elements}\r\n\t\t\t\tid=\"submit\"\r\n\t\t\t\tclassName=\"Stripebutton\"\r\n\t\t\t>\r\n\t\t\t\t<span id=\"button-text\">\r\n\t\t\t\t\t{isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\r\n\t\t\t\t</span>\r\n\t\t\t</button>\r\n\t\t\t{/* Show any error or success messages */}\r\n\t\t\t{message && <div id=\"payment-message\">{message}</div>}\r\n\t\t</form>\r\n\t);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}