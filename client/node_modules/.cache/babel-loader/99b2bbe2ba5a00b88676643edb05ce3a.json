{"ast":null,"code":"var _jsxFileName = \"F:\\\\WebDev\\\\Store\\\\client\\\\src\\\\pages\\\\components\\\\CheckoutForm.jsx\";\nimport { ElementsConsumer, PaymentElement } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CheckoutForm extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      const {\n        stripe,\n        elements\n      } = this.props;\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n      const result = await stripe.confirmPayment({\n        //`Elements` instance that was used to create the Payment Element\n        elements,\n        confirmParams: {\n          return_url: \"https://example.com/order/123/complete\"\n        }\n      });\n      if (result.error) {\n        // Show error to your customer (for example, payment details incomplete)\n        console.log(result.error.message);\n      } else {\n        // Your customer will be redirected to your `return_url`. For some payment\n        // methods like iDEAL, your customer will be redirected to an intermediate\n        // site first to authorize the payment, then redirected to the `return_url`.\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !this.props.stripe,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this);\n  }\n}\nexport default function InjectedCheckoutForm() {\n  return /*#__PURE__*/_jsxDEV(ElementsConsumer, {\n    children: _ref => {\n      let {\n        stripe,\n        elements\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(CheckoutForm, {\n        stripe: stripe,\n        elements: elements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this);\n}\n_c = InjectedCheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"InjectedCheckoutForm\");","map":{"version":3,"names":["ElementsConsumer","PaymentElement","CheckoutForm","React","Component","handleSubmit","event","preventDefault","stripe","elements","props","result","confirmPayment","confirmParams","return_url","error","console","log","message","render","InjectedCheckoutForm"],"sources":["F:/WebDev/Store/client/src/pages/components/CheckoutForm.jsx"],"sourcesContent":["import { ElementsConsumer, PaymentElement } from \"@stripe/react-stripe-js\";\r\nclass CheckoutForm extends React.Component {\r\n\thandleSubmit = async (event) => {\r\n\t\t// We don't want to let default form submission happen here,\r\n\t\t// which would refresh the page.\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconst { stripe, elements } = this.props;\r\n\r\n\t\tif (!stripe || !elements) {\r\n\t\t\t// Stripe.js has not yet loaded.\r\n\t\t\t// Make sure to disable form submission until Stripe.js has loaded.\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst result = await stripe.confirmPayment({\r\n\t\t\t//`Elements` instance that was used to create the Payment Element\r\n\t\t\telements,\r\n\t\t\tconfirmParams: {\r\n\t\t\t\treturn_url: \"https://example.com/order/123/complete\",\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tif (result.error) {\r\n\t\t\t// Show error to your customer (for example, payment details incomplete)\r\n\t\t\tconsole.log(result.error.message);\r\n\t\t} else {\r\n\t\t\t// Your customer will be redirected to your `return_url`. For some payment\r\n\t\t\t// methods like iDEAL, your customer will be redirected to an intermediate\r\n\t\t\t// site first to authorize the payment, then redirected to the `return_url`.\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t<PaymentElement />\r\n\t\t\t\t<button disabled={!this.props.stripe}>Submit</button>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default function InjectedCheckoutForm() {\r\n\treturn (\r\n\t\t<ElementsConsumer>\r\n\t\t\t{({ stripe, elements }) => (\r\n\t\t\t\t<CheckoutForm stripe={stripe} elements={elements} />\r\n\t\t\t)}\r\n\t\t</ElementsConsumer>\r\n\t);\r\n}\r\n"],"mappings":";AAAA,SAASA,gBAAgB,EAAEC,cAAc,QAAQ,yBAAyB;AAAC;AAC3E,MAAMC,YAAY,SAASC,KAAK,CAACC,SAAS,CAAC;EAAA;IAAA;IAAA,KAC1CC,YAAY,GAAG,MAAOC,KAAK,IAAK;MAC/B;MACA;MACAA,KAAK,CAACC,cAAc,EAAE;MAEtB,MAAM;QAAEC,MAAM;QAAEC;MAAS,CAAC,GAAG,IAAI,CAACC,KAAK;MAEvC,IAAI,CAACF,MAAM,IAAI,CAACC,QAAQ,EAAE;QACzB;QACA;QACA;MACD;MAEA,MAAME,MAAM,GAAG,MAAMH,MAAM,CAACI,cAAc,CAAC;QAC1C;QACAH,QAAQ;QACRI,aAAa,EAAE;UACdC,UAAU,EAAE;QACb;MACD,CAAC,CAAC;MAEF,IAAIH,MAAM,CAACI,KAAK,EAAE;QACjB;QACAC,OAAO,CAACC,GAAG,CAACN,MAAM,CAACI,KAAK,CAACG,OAAO,CAAC;MAClC,CAAC,MAAM;QACN;QACA;QACA;MAAA;IAEF,CAAC;EAAA;EAEDC,MAAM,GAAG;IACR,oBACC;MAAM,QAAQ,EAAE,IAAI,CAACd,YAAa;MAAA,wBACjC,QAAC,cAAc;QAAA;QAAA;QAAA;MAAA,QAAG,eAClB;QAAQ,QAAQ,EAAE,CAAC,IAAI,CAACK,KAAK,CAACF,MAAO;QAAA,UAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAC/C;EAET;AACD;AAEA,eAAe,SAASY,oBAAoB,GAAG;EAC9C,oBACC,QAAC,gBAAgB;IAAA,UACf;MAAA,IAAC;QAAEZ,MAAM;QAAEC;MAAS,CAAC;MAAA,oBACrB,QAAC,YAAY;QAAC,MAAM,EAAED,MAAO;QAAC,QAAQ,EAAEC;MAAS;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;EACpD;IAAA;IAAA;IAAA;EAAA,QACiB;AAErB;AAAC,KARuBW,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}